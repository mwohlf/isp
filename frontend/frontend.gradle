buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE")
        classpath("io.swagger:swagger-codegen:2.3.0-SNAPSHOT")
        classpath("com.moowork.gradle:gradle-node-plugin:1.2.0")
    }
}

// gives us the npm_install task
// see: https://blog.jdriven.com/2016/10/integrate-angular-spring-boot-gradle/
apply plugin: 'com.moowork.node'

node {
    version = "${rootProject.versions.node}"
    npmVersion = "${rootProject.versions.npm}"
    download = true
    workDir = file("${projectDir}/.gradle/node")
    nodeModulesDir = file("${project.projectDir}")
}

task build(type: NpmTask) {
    group 'build'
    description 'npm run build'

    args = ['run', 'build']   // compiles into dist
}

build.dependsOn(npm_install) // populates the node_modules dir


task generateApi {
    group 'API Generation'
    description 'Create angular API from the swagger definition, the definition must be provided by the root project'

    inputs.files(file("${projectDir}/src/resources/api.json"))
    outputs.dir(file("${projectDir}/src/generated"))

    doLast {
        //noinspection UnnecessaryQualifiedReference
        def config = new io.swagger.codegen.config.CodegenConfigurator()
        config.setInputSpec("file:///${projectDir}/src/resources/api.json")
        config.setOutputDir("${projectDir}/src/generated")
        config.setLang('typescript-angular')
        config.setVerbose(false)
        config.setAdditionalProperties([
            'basePath': 'http://localhost:8080'
        ])
        // config.setImportMappings([
        //        'Dog': 'io.swagger.petstore.client.model.Dog'
        // ])
        //noinspection UnnecessaryQualifiedReference
        new io.swagger.codegen.DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

build.dependsOn(generateApi)  // hook up with the build task


task clean {
    group 'cleanup'
    description 'remove generated api files ain the generated directory and compiled files in dist'

    doLast {
        delete "${projectDir}/src/generated"     // target dir for swagger
        delete "${projectDir}/dist/"             // target dir for build
    }
}



